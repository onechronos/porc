(* list *)
type a = float list

(* option *)
type b = a option

(* record *)
type c = { x : int; y : string; z : unit }

(* sum *)
type d = [
  | A of bool
  | B of b
]

(* tuple *)
type e = (int * float)

(* alias of complex type *)
type f = e

(* parametric *)
type 'a g = [ G1 of 'a | G2 of d ]

(* parametric instantiation *)
type h = int g

(* alias of builtin *)
type i = int

(* mutually recursive types *)
type j = [ I of int | K of k ]
type k = [ S of string | J of j ]

(* parametric instantiation in record *)
type m = {
  h : h;
  fg : float g
}

(* anonymous record *)
type n = [ X of { i : int } ]

(* anonymous sum NOT SUPPORTED *)
(* type o = { z : [ Z | Y of bool ] } *)

(* recursive *)
type sexpr = [
  | Atom of string
  | List of sexpr list
]

(* recursive *)
type tree = [
  | Leaf of float
  | Node of (tree * float * tree)
] 

type q <ocaml module="Q" t="t"> <rust module="q" t="t"> = abstract

(* [everything] and [el] used to create one value
   containing values of all of the types above *)
type everything = [
  | AA of a
  | BB of b
  | CC of c
  | DD of d
  | EE of e
  | FF of f
  | GG of bool g
  | HH of h
  | II of i
  | JJ of j
  | KK of k
  | MM of m
  | NN of n
  | QQ of q
  | SS of sexpr
  | TT of tree
]

type el = { el : everything list }
