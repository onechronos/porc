type a = float list
type b = a option
type c = { x : int; y : string }
type d = [
  | A of bool
  | B of b
]
type e = (int * float)
type f = e
type 'a g = [ G1 of 'a | G2 of d ]
type h = int g
type i = int
type m = {
  h : h;
  fg : float g
}
type j = [ I of int | K of k ]
type k = [ S of string | J of j ]
type sexpr = [
  | Atom of string
  | List of sexpr list
]
type tree = [
  | Leaf of float
  | Node of (tree * float * tree)
] 
type everything = [
  | AA of a
  | BB of b
  | CC of c
  | DD of d
  | EE of e
  | FF of f
  | GG of bool g
  | HH of h
  | II of i
  | MM of m
  | JJ of j
  | KK of k
  | SS of sexpr
  | TT of tree
]

type el = { el : everything list }